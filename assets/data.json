[
        {
            "type": "title",
            "content": "Que es R-Info?",
            "elements": [
                { "type": "paragraph", "content": "R-Info es un entorno de programacion donde se aprende conceptos basicos sobre como se constituye un programa y como se escribe uno, esto lo hace de manera sencilla ( con instrucciones y datos elementales o basicos en idioma español ) y didacticamente al ser un robot o varios, ubicado dentro de un mapa, el que realiza el algoritmo creado por programador" }
            ]
        },
        {
            "type":"title", "content":"Instalacion", "elements":[
                {"type":"paragraph", "content":"Para la instalacion, se debe tener en cuenta que existen dos archivos para los sistemas de Windows y Linux, descargue el .jar correspondiente a su sistema operativo y proceda con la instalacion"}
            ],
            "subtitles":[
                {"type":"subtitle", "content":"Windows", "elements":[
                    {"type":"paragraph","content":"Basta con instalar el archivo haciendo doble click sobre el mismo"}
                ]
                },
                {"type":"subtitle", "content":"Linux", "elements":[
                    {"type":"paragraph","content":"Para ejecutarlo vamos a trabajar desde la consola para iniciarla podes hacerlo con Ctrl+Alt+t\nPrimero es necesario instalar la maquina virtual de java denominado JRE o Java Runtime Enviroment que provee todas las dependencias necesarias para ejecutar una aplicación java, esto lo pueden hacer ejecutando ' sudo apt install default-jre ' para ubuntu o debian, si tenes otra distro te recomendamos que busques como instalar la misma en tu SO.\nPara ejecutar la aplicación hay que darle permisos de ejecución con el comando ' chmod +x nombre_del_archivo.jar ' después de esto esta listo para ejecutarlo y eso se hace desde consola con ' java -jar nombre_del_archivo.jar '"}
                ]
                }

            ]
        },
        {
            "type": "title",
            "content": "Tipos de datos",
            "elements": [
                { "type": "paragraph", "content": "Para trabajar con informacion o valores se disponen dos formas de representacion" }
                ],
                "subtitles": [
                    {
                        "type": "subtitle",
                        "content": "Numeros",
                        "elements": [
                            { "type": "paragraph", "content": "El tipo de dato numero se utiliza para representar cantidades, es decir, como los el conjunto de los numeros enteros en matematica." },
                            { "type": "paragraph", "content": "Estos van desde el -2^31 ( -2.147.483.648 ) hasta el 2^31 ( 2.147.483.648 )." }
                        ]
                    },
                    {
                        "type": "subtitle",
                        "content": "Booleanos",
                        "elements": [
                            { "type": "paragraph", "content": "El tipo de dato booleano se utiliza para representar si algo es verdad o si algo es falso, es decir, la veracidad de una afirmacion o sentencia" },
                            { "type": "paragraph", "content": "Sus dos unicos posible valores son" },
                            { "type": "list", "content": ["'V' para la Verdad", "'F' para la Falsedad"] },
                            { "type": "paragraph", "content": "Tambien se usan para representar: " },
                            { "type": "list", "content": ["Existencia o inexistencia", "Permitido/habilitado o no permitido/no habilitado"] }
                        ]
                    }
                ]
        },
        {
            "type": "title",
            "content": "Operadores",
            "elements": [
                { "type": "paragraph", "content": "Dentro de la sintaxis del lenguaje se encuentran los operadores que son un conjunto de caracteres que permiten la manipulacion y/o comparacion de valores explicitos o en variables" }
                ],
                "subtitles": [
                    {
                        "type": "subtitle",
                        "content": "Logicos",
                        "elements": [
                            { "type": "paragraph", "content": "Los operadores logicos dan como resultado valores booleanos, es decir, verdad o falsedad dependiendo de las entradas" },
                            { "type": "paragraph", "content": "Operadores para datos booleanos:" },
                            {"type":"table", "content":[["sintaxis","nombre/s"],["~","negacion , no"],["|","disyuncion, ó"],["&","conjuncion, y"],["=", "igualdad, igual"],["<>","diferente, distinto"]]},
                            { "type": "paragraph", "content": "Operadores para datos numericos:" },
                            {"type":"table", "content":[["sintaxis","nombre/s"],["=","igualacion, igual"],["<","menor"],[">","mayor"],["<=", "menor ó igual"],[">=", "mayor ó igual"],["<>","diferente, distinto"]]},
                            {"type":"secondarySubtitle", "content":"Operador ~"},
                            { "type": "paragraph", "content": "El no es un operador unario (se aplica en solo un valor), este cambia el valor logico al opuesto" },
                            { "type": "paragraph", "content": "Su tabla de verdad es:" },
                            {"type":"table", "content":[["Entrada","Resultado"],["~F","v"],["~V","F"]]},
                            {"type":"secondarySubtitle", "content":"Operador |"},
                            {"type":"paragraph", "content":"El o es un operador binario (se aplica entre dos valores), este da como resultado verdad si almenos uno de los valores es verdad"},
                            { "type": "paragraph", "content": "Su tabla de verdad es:" },
                            {"type":"table", "content":[["Entrada","Resultado"],["F|F","F"],["V|F","V"],["F|V","V"],["V|V","V"]]},
                            {"type":"secondarySubtitle", "content":"Operador &"},
                            {"type":"paragraph", "content":"El y es un operador binario (se aplica entre dos valores), este da como resultado verdad si solo si ambos valores son verdad"},
                            { "type": "paragraph", "content": "Su tabla de verdad es:" },
                            {"type":"table", "content":[["Entrada","Resultado"],["F&F","F"],["V&F","F"],["F&V","F"],["V&V","V"]]},
                            {"type":"secondarySubtitle", "content":"Operador ="},
                            {"type":"paragraph", "content":"El igual es un operador binario (se aplica entre dos valores), este da como resultado verdad si solo si ambos valores son iguales respetando que sean el mismo tipo de dato"},
                            { "type": "paragraph", "content": "Su tabla de verdad con valores booleanos es:" },
                            {"type":"table", "content":[["Entrada","Resultado"],["F=F","F"],["V=F","F"],["F=V","F"],["V=V","V"]]},
                            { "type": "paragraph", "content": "Su tabla de verdad con valores numericos es:" },
                            {"type":"table", "content":[["Entrada","Resultado"],["2=2","V"],["5=18","F"],["-95=4","F"],["-1=-1","V"]]},
                            {"type":"secondarySubtitle", "content":"Operador <>"},
                            {"type":"paragraph", "content":"El diferente es un operador binario (se aplica entre dos valores), este da como resultado verdad si solo si ambos valores son distintos respetando que sean el mismo tipo de dato"},
                            { "type": "paragraph", "content": "Su tabla de verdad con valores booleanos es:" },
                            {"type":"table", "content":[["Entrada","Resultado"],["F<>F","F"],["V<>F","V"],["F<>V","V"],["V<>V","F"]]},
                            { "type": "paragraph", "content": "Su tabla de verdad con valores numericos es:" },
                            {"type":"table", "content":[["Entrada","Resultado"],["2=2","F"],["5<>18","V"],["-95<>4","V"],["-1<>-1","F"]]},
                            {"type":"secondarySubtitle", "content":"Operador <"},
                            {"type":"paragraph", "content":"El menor es un operador binario (se aplica entre dos valores), este da como resultado verdad si solo si el primer valor es mas pequeño que el segundo"},
                            { "type": "paragraph", "content": "Su tabla de verdad con valores numericos es:" },
                            {"type":"table", "content":[["Entrada","Resultado"],["2<2","F"],["4<23","V"],["65<-1","F"],["-5<-1","V"]]},
                            {"type":"secondarySubtitle", "content":"Operador >"},
                            {"type":"paragraph", "content":"El mayor es un operador binario (se aplica entre dos valores), este da como resultado verdad si solo si el primer valor es mas grande que el segundo"},
                            { "type": "paragraph", "content": "Su tabla de verdad con valores numericos es:" },
                            {"type":"table", "content":[["Entrada","Resultado"],["2>2","F"],["4>23","F"],["65>-1","V"],["-1>-5","V"]]},
                            {"type":"secondarySubtitle", "content":"Operador <="},
                            {"type":"paragraph", "content":"El menor o igual es un operador binario (se aplica entre dos valores), este da como resultado verdad si primer valor es mas pequeño que el segundo o si los dos valores son iguales"},
                            { "type": "paragraph", "content": "Su tabla de verdad con valores numericos es:" },
                            {"type":"table", "content":[["Entrada","Resultado"],["2<=2","V"],["4<=23","V"],["65<=-1","F"],["-1<=-1","V"]]},
                            {"type":"secondarySubtitle", "content":"Operador >="},
                            {"type":"paragraph", "content":"El mayor o igual es un operador binario (se aplica entre dos valores), este da como resultado verdad si primer valor es mas grande que el segundo o si los dos valores son iguales"},
                            { "type": "paragraph", "content": "Su tabla de verdad con valores numericos es:" },
                            {"type":"table", "content":[["Entrada","Resultado"],["2>=2","V"],["4>=23","F"],["65>=-1","V"],["-1>=-1","V"]]}
                        ]
                    },
                    {
                        "type": "subtitle",
                        "content": "Aritmeticos",
                        "elements": [
                            { "type": "paragraph", "content": "Los operadores aritmeticos dan como resultado valores numericos enteros dependiendo de las entradas" },
                            { "type": "paragraph", "content": "Operadores:" },
                            {"type":"table", "content":[["sintaxis","Funcion"],["+","adicion , suma"],["-","sustraccion , resta"],["*","producto , multiplicacion"],["/", "division"]]},
                            {"type":"secondarySubtitle", "content":"Asignacion"},
                            { "type": "paragraph", "content": "Los operadores de asignacion se utilizan para decir el tipo de dato de una variable o para darle el valor a una variable" },
                            { "type": "paragraph", "content": "Operadores:" },
                            {"type":"table", "content":[["Sintaxis","Funcion"],[":","Asignacion"],[":=","Asignacion"]]},
                            {"type":"secondarySubtitle", "content":"Operador :"},
                            { "type": "paragraph", "content": "El : se utiliza para decir que x variable sera de cierto tipo" },
                            {"type":"table", "content":[["Utilizacion"],["(nombre variable) : (tipo de dato)"]]},
                            {"type":"code", "content":"num: numero; cond: boolean;"},

                            {"type":"secondarySubtitle", "content":"Operador :="},
                            { "type": "paragraph", "content": "El := se utiliza para decir que x variable asumira un valor respetando el tipo de dato que representa la variable" },
                            {"type":"table", "content":[["Utilizacion"],["(nombre variable) := (valor a dar)"]]},
                            {"type":"code", "content":"num:= 28; cond:=V;"}
                        ]
                    },
                    {
                        "type": "subtitle",
                        "content": "Encadenamiento",
                        "elements": [
                            { "type": "paragraph", "content": "Como en las matematicas se pueden armar ecuaciones con valores y operaciones, esto no es la exepcion, por ende para encadenar operaciones solo se necesitan los valores/variables y operaciones que operen con estos" },
                            { "type": "paragraph", "content": "Ejemplo con numeros" },
                            {"type":"code", "content":"Si se quiere sumar el doble de 9 con la mitad de 16, se debe hacer\n2*9 + 16 / 2, esto da como resultado 26"},
                            { "type": "paragraph", "content": "Ejemplo con booleanos" },
                            {"type":"code", "content":"Si se quiere saber si dos valores son verdaderos o un tercero negado es verdadero se deb hacer\nV & F | ~ F , esto da como resultado V"},
                            { "type": "paragraph", "content": "Ejemplo con numeros y booleanos" },
                            {"type":"paragraph","content":"Normalmente se realizan operaciones aritmeticas y a esos resultados se aplican operadores logicos correspondientes de manera que el resultado final sean valores booleanos que reflejen un estado"},
                            {"type":"code", "content":"Se quiere saber si el doble de 10 es menor a la mitad de 34\n2 * 10 < 34 / 2 = V, esto da como resultado Verdadero"},
                            {"type":"paragraph","content":"El resultado de lo anterior deberia ser falso si no fuera por el echo de que no queda claro el orden de las operaciones, para eso se utilizan los ( )"}
                            
                        ]
                    },
                    {"type":"subtitle", "content":"Parentesis",
                    "elements":[
                        { "type": "paragraph", "content": "Los parentesis son de gran importancia ya que permiten denotar prioridad a la hora de la resolucion de un encadenamiento de operaciones, como se bio anteriormente en determinadas circunstancias es necesario indicar la prioridad para una correcta operacion y tambien para evitar confusiones\nReestructuracion de ejemplo previo" },
                            {"type":"code","content":"Se quiere saber si el doble de 10 es menor a la mitad de 34\n( 2 * 10 ) < ( 34 / 2 ) = V , el resultado es F"},
                            { "type": "paragraph", "content": "Ahora queda claro que primero deben resolverse las operaicones aritmeticas y luego las logicas\nLa utilizacion de parentesis permite realizar encadenamiento de operaciones mas complejas\nPor ejemplo"},
                            {"type":"code", "content":"Se quiere saber si dos valores son V o si es V la negacion de un tercero o el valor de un cuarto\n( F & V ) | ( ( ~ V ) | V ), el resultado es V"},
                            {"type":"secondarySubtitle", "content":"Operador :"},
                            { "type": "paragraph", "content": "El : se utiliza para decir que x variable sera de cierto tipo" },
                            {"type":"table", "content":[["Utilizacion"],["(nombre variable) : (tipo de dato)"]]},
                            {"type":"code", "content":"num: numero; cond: boolean;"}
                    ]
                    }
                ]
        },
    {
        "type": "title",
        "content": "Variables",
        "elements": [
            { "type": "paragraph", "content": "Una variable es un espacio de memoria donde se guarda algun valor que representa cierto dato, este espacio se representa para el programador con el nombre que se le da a la variable y a travez de la utilizacion del nombre se puede acceder al valor para leerlo o cambiarlo" }
        ], "subtitles":[
            {"type":"subtitle","content":"Declaracion", "elements":[
                {"type":"paragraph", "content":"Para declarar variables se necesita crear el segmento de varibales escribiendo la palabra clave variables, este segmento no puede ser creado en cualquier lugar, revisar el apartado de secciones, ahi se detalla si en una seccion pueden existir variables dato\nLos tipos posible de variables son:"},
                {"type":"list", "content":["numero: para representar numeros enteros", "boolean: para representar valores logicos (V o F)"]},
                {"type":"paragraph","content":"La creacion de la variable sigue la siguiente estructura"},
                {"type":"code","content":"variables\n   nombreDeLaVariable : tipoDeVariable"},
                {"type":"paragraph","content":"Se pueden crear la cantidad que se necesiten"},
                {"type":"code","content":"variables\n   nombre1 : tipo1\nnombre2 : tipo2\nnombre3 : tipo3\nnombre4 : tipo4\n"},
                {"type":"paragraph","content":"Si son del mismo tipo pueden declararse juntas separadas por una ','"},
                {"type":"code","content":"variables\n   nombre1, nombre4 : tipo1\nnombre2, nombre3 : tipo2"}
            ]
            },
            {"type":"subtitle","content":"Operaciones", "elements":[
                {"type":"paragraph", "content":"Como se definio previamente las variables representan valores por lo tanto existen las operaciones que definimos tambien previamente\nBasicamente las operaciones con variables se dividne en dos grandes grupos, las que involucran lectura de una variable o por el otro las que involucran escritura a una variable"},
                {"type":"list", "content":["numero: para representar numeros enteros", "boolean: para representar valores logicos (V o F)"]},
                {"type":"paragraph","content":"La creacion de la variable sigue la siguiente estructura"},
                {"type":"code","content":"variables\n   nombreDeLaVariable : tipoDeVariable"},
                {"type":"paragraph","content":"Se pueden crear la cantidad que se necesiten"},
                {"type":"code","content":"variables\n   nombre1 : tipo1\nnombre2 : tipo2\nnombre3 : tipo3\nnombre4 : tipo4\n"},
                {"type":"paragraph","content":"Si son del mismo tipo pueden declararse juntas separadas por una ','"},
                {"type":"code","content":"variables\n   nombre1, nombre4 : tipo1\nnombre2, nombre3 : tipo2"},
                {"type":"secondarySubtitle", "content":"Escritura"},
                {"type":"paragraph","content":"Para la escritura de un valor en una variable se debe poner la variable a escribir o reescribir su valor luego la sintaxis de asignacion ( := ) y a continuacion el valor explicito o las operaciones que den como resultado un valor, siempre respetando los tipos de dato"},
                {"type":"code","content":"Por ejemplo: \n\nSi se quiere guardar en la variable resultado el doble de una variable, lo que se debe hacer es\n\n    resultado := 2 * ( nombreDeLaVariable )\n\no bien como la multiplicacion es distributiva\n\n    resultado := ( nombreDeLaVariable ) * 2\n\nSi se quiere guardar el valor opuesto a la verificacion de si una variable numerica es mayor o igual a otra, lo que se debe hacer es\n\n validacionOpuesta := ~ ( n1 >= n2 )\n\no bien como la multiplicacion es distributiva\n\n    resultado := ( nombreDeLaVariable ) * 2"},
                {"type":"secondarySubtitle", "content":"Lectura"},
                {"type":"paragraph","content":"Para la utilizacion de el valor que representa una variable es tan sencillo como poner el nombre de variable en el lugar donde corresponderia que este el valor que esta representa"},
                {"type":"code","content":"Por ejemplo: \n\n   Si se quiere sumar dos numeros, siendo uno la variable num1 y otro la variable num 2 lo que se debe hacer es\n\n  num1 + num2\n\nOtro ejemplo:\n\nSi se quiere asegurar que dos variables booleanas, siendo una estado1 y otra estado2, sean verdaderas lo que se debe hacer es\n\nestado1 & estado2"}
            ]
            }
        ]
    },
    {
        "type": "title",
        "content": "Instrucciones",
        "elements": [
            { "type": "paragraph", "content": "Dentro de la sintaxis del lenguaje se encuentran las instrucciones que permiten realizar determinadas tareas/acciones\nEstas se dividen en"}
        ], "subtitles":[
            {"type":"subtitle",
                "content":"Control",
                "elements":[
                    {"type":"paragraph", "content":"Las intrucciones de control son las que permiten que se ejecute cierta codigo o no, con esto se consigue que un programa reaccione dependiendo de ciertos valores o circunstancias\nLas instrucciones se dividen en dos grupo iterativas o no interativas\nNo iterativas: solo ejecutan el codigo que les presigue una unica vez\nIterativas: pueden ejecutar el codigo que les presigue 1 o mas veces\nInstrucciones:"},
                    {"type":"table", "content":[["sintaxis", "Iterativa"], ["si(condicional/es)","no"],["sino", "no"],["mientras(condicional/es)", "si"],["repetir(numero)", "si"]]},
                    {"type":"secondarySubtitle", "content":"Instruccion si"},
                    {"type":"paragraph", "content":"La instruccion si se utiliza para habilitar o no la ejecucion del bloque de codigo que este identado debajo de esta, este solo se ejecutara si solo si el resultado de la condicion que acompaña al si sea verdadera\nEstructura del si"},
                    {"type":"code", "content":"si ( condicion )\n   bloque de codigo\n  a ejecutar"},
                    {"type":"paragraph", "content":"Ejemplo de uso del si es guardar el maximo entre dos numeros"},
                    {"type":"code", "content":"si (n1>n2)\n max:= n1\nsi (n1<n2)\n max:= n2\n"},
                    {"type":"secondarySubtitle", "content":"Instruccion sino"},
                    {"type":"paragraph", "content":"La instruccion sino solo se puede utilizar si previamente existe una instruccion si, ya que esta actua en consecuencia del si. El sino se utiliza para habilitar la ejecucion del bloque de codigo que este identado debajo de este si solo si la condicion que evalua el si dio falsa\nEstructura del sino"},
                    {"type":"code", "content":"si ( condicion )\n   bloque de codigo\n  a ejecutar\nsino ( condicion )\n   bloque de codigo\n  a ejecutar"},
                    {"type":"paragraph", "content":"Optimizando el maximo entre dos numeros"},
                    {"type":"code", "content":"si (n1>n2)\n max:= n1\nsino\n max:= n2\n"},
                    {"type":"paragraph", "content":"No hace falta verificar si n2 es mayor a n1 ya que la primera condicion de dar falso significa que n2 es igual o mayor a n1, en el caso de no querer escribir en max un valor si n1 = n2, entonces se puede usar otro si"},
                    {"type":"code", "content":"si (n1>n2)\n max:= n1\nsino\n si(n2>n1)\n    max:= n2"},
                    {"type":"paragraph", "content":"Otra variante del mismo efecto"},
                    {"type":"code", "content":"si (n1>n2)\n max:= n1\nsino\n si(n2<>n1)\n    max:= n2"},

                    {"type":"secondarySubtitle", "content":"Instruccion mientras"},
                    {"type":"paragraph", "content":"La instruccion mientras se utiliza para ejecutar cierto bloque de codigo que este identado debajo de esta tantas veces como la condicion que evalua el mientras de verdad, en caso contrario no ejecuta el codigo y sigue con lo que este por fuera\nEstructura del mientras"},
                    {"type":"code", "content":"mientras ( cantidad )\n   bloque de codigo\n  a ejecutar"},
                    {"type":"paragraph", "content":"Un ejemplo es multiplicar un numero por si mismo mientras no supere un maximo o se multiplique un maximo de 5 veces"},
                    {"type":"code", "content":"mientras ((n1<max) | (cont < 5))\n n:= n*n\n  cont:= cont+1"},

                    {"type":"secondarySubtitle", "content":"Instruccion repetir"},
                    {"type":"paragraph", "content":"La instruccion repetir se utiliza para ejecutar cierto bloque de codigo que este identado debajo de esta tantas veces como lo indique la variable o valor explicito que presigue a la instruccion\nEstructura del repetir"},
                    {"type":"code", "content":"repetir ( cantidad )\n   bloque de codigo\n  a ejecutar"},
                    {"type":"paragraph", "content":"Un ejemplo es calcular la potencia de cierto numero"},
                    {"type":"code", "content":"repetir (exponente)\n res:= res*base"}
                ]
            },
            {"type":"subtitle",
                "content":"Estado",
                "elements":[
                    {"type":"paragraph", "content":"Las instrucciones de estado son las que devuelven un dato que representa el estado de cierta caracteristica del robot con respecto al mapa o a su inventario\nRespecto del mapa existen las instrucciones"},
                    {"type":"table", "content":[["sintaxis", "Tipo de dato que devuelve","Descripcion"], ["PosAv","numero","El numero representa la avenida actual del robot"],["PosCa","numero","El numero representa la calle actual del robot"],["HayFlorEnLaEsquina","boolean","El booleano representa si hay una flor en la esquina actual"],["HayPapelEnLaEsquina","boolean","El booleano representa si hay un papel en la esquina actual"]]},
                    {"type":"paragraph","content":"Repecto del inventario existen las intrucciones"},
                    {"type":"table", "content":[["sintaxis", "Tipo de dato que devuelve","Descripcion"], ["HayFlorEnLaBolsa","boolean","El booleano representa si hay una flor en el inventario"],["HayPapelEnLaBolsa","boolean","El booleano representa si hay un papel en el inventario"]]}
                ]
            },
            {"type":"subtitle",
                "content":"Accion",
                "elements":[
                    {"type":"paragraph", "content":"Las instrucciones de accion son las que permiten al robot la interaccion de su inventario con respecto al mapa y viseversa\nExisten las siguientes instruccion"},
                    {"type":"table", "content":[["sintaxis", "Accion"], ["tomarFlor","toma una flor de la esquina actual y la guarda en el inventario"],["tomarPapel", "toma un papel de la esquina actual y lo guarda en el inventario"],["depositarFlor", "deposita una flor del inventario en la esquina actual"],["depositarPapel", "deposita un papel del inventario en la esquina actual"]]}
                ]
            },
            {"type":"subtitle",
                "content":"Desplazamiento",
                "elements":[
                    {"type":"paragraph", "content":"Para el desplazamiento del robot en el mapa existen las siguientes instrucciones"},
                    {"type":"table", "content":[["sintaxis"], ["mover"],["derecha"],["Pos(avenida, calle)"]]},

                    {"type":"secondarySubtitle", "content":"Instruccion mover"},
                    {"type":"paragraph","content":"La instruccion mover se utiliza para desplazar al robot 1 posicion en la direccion que se encuentre mirando"},
                    {"type":"table", "content":[["Direccion", "Posicion resultado"], ["arriba","avenidaActual +1, calleActual"],["derecha", "avenidaActual, calleActual +1"],["abajo", "avenidaActual -1, calleActual"],["izquierda", "avenidaActual, calleActual -1"]]},
                    
                    {"type":"secondarySubtitle", "content":"Instruccion derecha"},
                    {"type":"paragraph","content":"La instruccion derecha se utiliza para cambiar la direccion que se encuentra mirando por la consecutiva en sentido horario"},
                    {"type":"table", "content":[["Direccion base", "Direccion resultado"], ["arriba","derecha"],["derecha", "abajo"],["abajo", "izquierda"],["izquierda", "arriba"]]},

                    {"type":"secondarySubtitle", "content":"Instruccion Pos"},
                    {"type":"paragraph","content":"La instruccion Pos se utiliza para ubicar al robot en un par ( avenida, calle ) determinado"},
                    {"type":"table", "content":[["Sintaxis"], ["Pos( numeroDeAvenida, numeroDeCalle )"]]},
                    {"type":"code", "content":"Pos( 1, 33 ) resulta en que el robot ahora se encuentra en la avenida 1 y calle 33\nPos( 50, 50 ) resulta en que el robot ahora se encuentra en la avenida 50 y calle 50\nPos( -88, 45 ) resulta en error ya que el numero de avenida debe estar dentro del rango 1 - 100"}
                ]
            },
            {"type":"subtitle",
                "content":"Comunicacion",
                "elements":[
                    {"type":"paragraph", "content":"La comunicacion es la tranferencia de mensajes hacia el usuario o entre robots\nLas instrucciones son"},
                    {"type":"list", "content":["Informar","EnviarMensaje", "RecibirMensaje"]},

                    {"type":"secondarySubtitle", "content":"Instruccion Informar"},
                    {"type":"paragraph", "content":"Para la comunicacion con el usuario, en otras palabras mostrar informacion en pantalla, existe la instruccion Informar"},
                    {"type":"table", "content":[["Sintaxis"], ["Informar( 'cadenaDeCaracteres', valor )"]]},
                    {"type":"paragraph","content":"Ejemplo de uso"},
                    {"type":"code", "content":"Informar( 16 )\nInformar( 'minimo', cantMin )\nInformar( V )\nInformar( floresJuntadas )\n"},

                    {"type":"secondarySubtitle", "content":"Instruccion EnviarMensaje"},
                    {"type":"paragraph", "content":"Esta instruccion se utiliza para enviar un valor a un receptor determinado, siendo una variable robot el receptor"},
                    {"type":"table", "content":[["Sintaxis"], ["EnviarMensaje( valor, nombreVariableRobot )"]]},
                    {"type":"paragraph","content":"Esta instruccion es asincronica, es decir, se ejecuta y continua la ejecucion. Al emisor del mensaje no le afecta si el receptor esta esperando o no el mensaje\nEjemplo de uso"},
                    {"type":"code", "content":"EnviarMensaje( 16, robot1 )\nEnviarMensaje( min, trabajador )\nInformar( V )\nEnviarMensaje( V, organizador )\n"},

                    {"type":"secondarySubtitle", "content":"Instruccion RecibirMensaje"},
                    {"type":"paragraph", "content":"Esta instruccion se utiliza para recibir un valor de un emisor determinado o no determinado, siendo una variable robot el emisor"},
                    {"type":"table", "content":[["Sintaxis","Emisor"], ["RecibirMensaje( variableReceptora, nombreEmisor )","especifico"],["RecibirMensaje( variableReceptora, * )","cualquiera"]]},
                    {"type":"paragraph","content":"Esta instruccion es sincronica, es decir, hasta no recibir el mensaje esperado no continua la ejecucion del codigo\nEl primer parametro es una variable donde se guardara el valor que se envio en el mensaje, esta variable debe ser del mismo tipo que el valor enviado\nSi se especifica un emisor puntual el robot que ejecuta la instruccion quedara esperando el mensaje en el caso de que este no este en la cola de mensaje del robot\nEjemplo de uso"},
                    {"type":"code", "content":"RecibirMensaje( numAvenida, coordinador )\nRecibirMensaje( continuar, jefe )"},
                    {"type":"paragraph","content":"Si no se especifica un emisor puntual el robot que ejecuta la instruccion quedara esperando un mensaje de cualquier emisor en el caso de que no haya ninguno en la cola de mensaje del robot\nEjemplo de uso"},
                    {"type":"code", "content":"RecibirMensaje( codigo, * )\nRecibirMensaje( parar, * )"}
                ]
            },
            {"type":"subtitle",
                "content":"Generacion",
                "elements":[
                    {"type":"paragraph", "content":"Sobre generacion existe una unica instruccion para generar valores de tipo numero aleatorios dentro de un rango indicado\nLa instruccion es"},
                    {"type":"table", "content":[["sintaxis"], ["Random( variableReceptora, valorMinimo, valorMaximo )"]]},
                    {"type":"paragraph","content":"Ejemplo de uso"},
                    {"type":"code", "content":"Random( avRandom, 1, 50 )\nRandom( cant, 10, max )"}
                ]
            }
        ]
    },
    {
        "type":"title", "content":"Estructura del programa",
        "elements":[
            {"type":"paragraph", "content":"La estructura basica de un programa consiste de las siguientes secciones"},
            {"type":"code", "content":"programa\nprocesos ( no necesaria )\nareas\nrobots\nvariables\ncomenzar\nfin"},
            {"type":"paragraph", "content":"Las funciones de cada seccion se detallan a continuacion"}
        ]
    },
    {
        "type":"title", "content":"Secciones",
        "elements":[
            {"type":"paragraph", "content":"Un programa en este lenguage se constituye de secciones ( detalladas a continuacion ) que se encargan cada una de definir un aspecto del programa\nEstas se dividen en"},
            {"type":"list", "content":["programa","procesos","areas","robots","variables","Comenzar y fin"]}
        ], "subtitles":[
            {
                "type":"subtitle", "content":"Programa",
                "elements":[
                    {"type":"paragraph","content":"Esta es la seccion donde se le asigna un nombre al programa\nEstructura"},
                    {"type":"code", "content":"programa nombre_del_programa"},
                    {"type":"paragraph","content":"El nombre del programa puede estar constituido por:"},
                    {"type":"list", "content":["Letras minusculas y MAYUSCULAS","Numeros","Guiones medios '-' y bajos '_'"]},
                    {"type":"paragraph","content":"Ejemplo de uso"},
                    {"type":"code", "content":"programa ejercicio_1\nprograma TP1-E3"}
                ]
            },
            {
                "type":"subtitle", "content":"Procesos",
                "elements":[
                    {"type":"paragraph","content":"Esta es la seccion donde se crean modulos, estos pueden tener o no parametros\nEstructura"},
                    {"type":"code", "content":"procesos\n   proceso nombreDelModulo( parametros )\n declaracion de variables locales al modulo\ncomenzar\n  algoritmo que realiza el modulo\nfin"},
                    {"type":"paragraph","content":"El nombreDelModulo es lo que permite el llamado al modulo, en otras palabras lo que permite que se ejecute el codigo dentro de este\nPara una comunicacion de datos entre el algoritmo del modulo y el lugar donde se lo llama se utilizan los parametros\nPara una comunicacion de datos entre el algoritmo del modulo y el lugar donde se lo llama se utilizan los parametros\n"},
                    {"type":"secondarySubtitle", "content":"Parametos formales"},
                    {"type":"paragraph","content":"Un parametro formal tiene la siguiente declaracion"},
                    {"type":"code", "content":" tipoDeParametro nombreDelParametro : tipoDeDato\n"},
                    {"type":"paragraph","content":"Un parametro formal tiene la siguiente declaracion"}, 
                    {"type":"list", "content":["E: Entrada", "ES: Estrada y Salida"]},
                    {"type":"paragraph","content":"Tipo E\nEl tipo E significa que el parametro solo es para comunicar informacion hacia el modulo"},
                    {"type":"paragraph","content":"Tipo ES\nEl tipo ES significa que el parametro es para comunicar informacion con hacia el modulo y a su vez devolver informacion hacia el exterior del modulo"},
                    {"type":"paragraph","content":"El nombre del parametro funcion como una variable en la cual se carga el valor dado en el llamado y/o se devuelve el valor al llamado\nEl tipo de dato define el tipo de variable\nSi el modulo requiere mas de un parametro, estos se separan con ' ; '"},
                    
                    {"type":"secondarySubtitle", "content":"Parametos Actuales"},
                    {"type":"paragraph","content":"Los parametros actuales son los que envian la informacion hacia el modulo y/o reciben la informacion que este devuelva\nEn el caso que el parametro formal sea de tipo E, el actual correspondiente puede ser bien un valor explicito o una variable\nEn el caso que el parametro formal sea de tipo ES, el actual correspondiente solo puede ser una variable ya que en ella se guarda la devolucion del modulo\nSi el modulo tiene mas de un parametro, estos se separan con ' , '"},

                    {"type":"paragraph","content":"Los parametros formales y actuales se vinculan por la posicion, en otras palabras el primer formal con el primer actual y asi con los sucesibos\nEn el llamado al modulo debe existir igual cantidad de parametros que en la creacion de este y los tipos de datos que representa cada uno debe corresponder con su correspondiente en terminos de posiciones\nEjemplo de uso:   "},
                    {"type":"code", "content":" procesos\n  proceso sumarEsquinasVaciasCalle( ES cantidad: numero )\n   variables\n     aux: numero\n   comenzar\n      aux:= 0\n       si ( ~( HayFlorEnLaEsquina | HayPapelEnLaEsquina ) )\n              aux:= aux +1\n          repetir 99\n                mover\n             si ( ~( HayFlorEnLaEsquina | HayPapelEnLaEsquina ) )\n              aux:= aux +1\n          cantidad:= cantidad + aux\n     fin\n    proceso calcularMaximo( E n: numero; ES max: numero )\n    comenzar\n   si ( n > max )\n     max:= n\n   fin\n      proceso hacerCuadrado3\n       comenzar\n              repetir 4\n          repetir 3\n                mover\n             derecha\n             fin"}, 
                    {"type":"paragraph","content":"Dentro de un modulo puede llamarse a otros modulos, de esta manera se produce un anidamiento de modulos que es positivo siempre y cuando se consiga una separacion de tareas que aumente la legibilidad y reusabilidad del codigo\nEjemplo de uso"},
                    {"type":"code", "content":" procesos\nproceso juntarFlores\ncomenzar\nmientras HayFlorEnLaEsquina\ntomarFlor\nfin\nproceso recorrerCalles( E cantCalles: numero )\nvariables\nsigCa, i: numero\nrepetir cantCalles\ni:= i +1\nrepetir 99\njuntarFlores\nmover\njuntarFlores\nsi ( i < cantCalles )\nsigCa:= sigCa +1\nPos( 1, sigCa)\nfin"}
                ]
            },
            {
                "type":"subtitle", "content":"Areas",
                "elements":[
                    {"type":"paragraph","content":"Esta es la seccion donde se crean areas del mapa donde los robots podran interactuar. Las areas son regiones cuadradas del mapa donde las avenidas y calles que componen cada una solo pueden estar incluidas en una unica declaracion de area\nEstructura"},
                    {"type":"code", "content":"areas\n  nombreArea : tipoDeArea( region )"},
                    {"type":"paragraph","content":"El nombre del area es lo que permite mas adelante referenciar esta definicion en la asignacion de areas de un robot\nExisten tres tipos de areas:"},
                    {"type":"list", "content":["AreaC: Area compartida","AreaP: Area privada","AreaPC:Area parcialmente compartida"]},
                    {"type":"secondarySubtitle","content":"AreaC"},
                    {"type":"paragraph", "content":"Este tipo es para definir que cierta region es compartida por los robots, esto quiere decir que a todos los robots se le asiganara esta area, consecuentemente quiere decir que podran interactuar en esta region"},
                    {"type":"secondarySubtitle","content":"AreaP"},
                    {"type":"paragraph", "content":"Este tipo es para definir que cierta region es de un unico robot, esto quiere decir que solo a un robot se le asignara esta area, consecuentemente este es el unico que podra interactuar en esta region"},
                    {"type":"secondarySubtitle","content":"AreaPC"},
                    {"type":"paragraph", "content":"Este tipo es para definir que cierta region es compartida por al menos dos robots y no es compartida por al menos un robot, esto quiere decir que se le asigna a almenos 2 robots y a almenos 1 no"},

                    {"type":"paragraph", "content":"La region es un cuadrado que se delimita por dos conjuntos:"},
                    {"type":"list", "content":["Avenida y calle inicial", "Avenida y calle final"]},
                    {"type":"paragraph", "content":"En ambos casos la avenida y calle estan incluidas en la region\nSe declara de la siguiente manera"},
                    {"type":"code", "content":"( avenidaInicial, calleInicial, avenidaFinal, calleFinal )"},
                    {"type":"paragraph", "content":"Ejemplo de uso"},
                    {"type":"code", "content":"areas\n  area1 : AreaC( 1, 1, 1, 1 )\n   zonaPrivada : AreaP( 11, 1, 100, 10 )\n areaTrabajo : AreaPC( 50, 50, 55, 60 )"}
                ]
            },
            {
                "type":"subtitle", "content":"Robots",
                "elements":[
                    {"type":"paragraph","content":"Esta es la seccion donde se definene los algoritmos que un cierto tipo de robot tendra que hacer durante la ejecucion del programa\nEstructura"},
                    {"type":"code", "content":"robots\n robot nombreTipoRobot\n variables\n     en el caso\n        de que se necesiten\n   comenzar\n      instrucciones que componen\n        el algoritmo para este tipo de robot\n  fin"},
                    {"type":"paragraph","content":"Cuando se declara el tipo de robot la seccion de variables solo debe ser agregada en el caso que el robot necesite variables numericas y/o booleanas de lo contrario no es necesario que este\nEn el apartado comenzar ... fin es similar a el comenzar ... fin de la seccion de procesos ya que es donde se crea el algoritmo del robot el cual al momento d ela ejecucion del programa se usara para que el robot realize tareas como moverse, interactuar con el mapa, realizar operaciones aritmeticas/logicas, comunicacion entre otras\nNormalmente un tipo de robot se define para un labor especifica que puede englobar tareas asociadas a esta labor, si se quiere hacer un uso optimo de los tipos de robot se descompone el problema en labores y se las asigna a diferentes robots para distribuir la carga de manera que se responda a la problematica de manera eficiente\nEjemplo de uso"},
                    {"type":"code", "content":"robots\n robot corredorAvenida\n comenzar\n      mientras (PosCa < 100)\n            mover\n     Informar('LlegueALaCalle',100)\n    fin\n   robot contadorFlores\n  variables\n     flores: numero\n    comenzar\n      flores:= 0\n        repetir 9\n         repetir 15\n                juntarFlores(flores)\n              mover\n         juntarFlores(flores)\n          Pos(PosAv + 1, 1)\n     fin"}
                ]
            },
            {
                "type":"subtitle", "content":"Variables",
                "elements":[
                    {"type":"paragraph","content":"Esta es la seccion donde se declaran las variables robot de un determinado tipo de robot cada una\nLas variables robot son las que se encargan de ejecutar los algoritmos que se definen en el programa\nEstructura"},
                    {"type":"code", "content":"variables\n  nombreVariableRobot: nombreTipoRobot"},
                    {"type":"paragraph","content":"El nombreVariableRobot es el nombre que tendra el robot durante la ejecucion\nEl nombreTipoRobot es el nombre con el cual se definio un tipo de robot en la seccion de robots\nEjemplo de uso"},
                    {"type":"code", "content":"variables\n  robot1: trabajador\n    padre: recolector\n    rJefe: coordinador"}
                ]
            },
            {
                "type":"subtitle", "content":"Comenzar y Fin",
                "elements":[
                    {"type":"paragraph","content":"Esta es la seccion donde se le asignan las areas correspondientes a cada variable robot y ademas su correspondiente posicionamiento inicial en el mapa\nEstructura"},
                    {"type":"code", "content":"comenzar\n   AsignarArea( nombreVariableRobot, nombreArea )\n    Iniciar( nombreVariableRobot, avenida, calle )\nfin"},
                    {"type":"paragraph","content":"A una variable robot se le pueden asignar multiples areas (siempre y cuando se respete el tipo de area definido) pero unicamente se incia en un punto del mapa\nEjemplo de uso:"},
                    {"type":"code", "content":"comenzar\n  AsignarArea( robot4, cuadrante )\n    AsignarArea( robot4, puntoPartida )\n    AsignarArea( jefe, areaJefe )\n  Iniciar( jefe, 1, 1 )\n    Iniciar( robot4, 50, 1 )\nfin"}
                ]
            }
        ]
    }
]

